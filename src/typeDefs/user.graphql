enum Gender {
	MALE
	FEMALE
}

enum RecordType {
	User
	Site
}

union Result = User | Site

input UserInput {
	firstName: String
	lastName: String
	email: String
	password: String
	gender: Gender
}

input SiteInput {
	name: String
}

input RecordInput {
	User: UserInput
	Site: SiteInput
}

input SitesInfoInput {
	siteId: ID!
	permissions: [PermissionInfoInput!]!
}

input CreateUserInput {
	firstName: String!
	lastName: String!
	email: String!
	password: String!
	gender: Gender!
	sites: [SitesInfoInput!]!
}

input UpdateUserInput {
	firstName: String!
	lastName: String!
	password: String!
	gender: Gender!
	sites: [SitesInfoInput!]!
}

input LoginUserInput {
	email: String!
	password: String!
}

input SearchInput {
	select: [String!]
	where: RecordInput
	start: Float
	end: Float
	order: JSONObject
	skip: Int
	take: Int
}

type LoginResponse {
	token: String!
	userPermissions: [UserPermissionsInfo!]!
}

type UserPermissionsInfo {
	siteId: ID!
	siteName: String
	permissions: [PermissionInfo!]!
	sitepermissions: [String!]!
}

type PermissionInfo {
	_id: ID
	code: String
}

type User {
	_id: ID!
	firstName: String!
	lastName: String!
	email: String!
	password: String!
	gender: Gender!
	resetPasswordToken: String
	resetPasswordExpires: Float
	fullName: String @upper @concat(value: "Chnirt")
	isLocked: Boolean!
	reason: String!
	isActive: Boolean!
	# createdAt: Float! @date(format: "mmmm d, yyyy")
	createdAt: Float!
	updatedAt: Float!
}

type Query {
	hello: String!
		@rateLimit(window: "3s", max: 1, message: "You are doing that too often.")
	me: User @isAuthenticated
	users(offset: Int, limit: Int): [User!] @isAuthenticated
	user(_id: ID!): User @isAuthenticated
	search(conditions: SearchInput!, type: RecordType!): [Result]!
}

type Mutation {
	createUser(input: CreateUserInput!): User
		@hasPermission(permission: "USER_CREATE")
		@rateLimit(window: "5s", max: 1, message: "You are doing that too often.")
	updateUser(_id: ID!, input: UpdateUserInput!): Boolean
		@hasPermission(permission: "USER_UPDATE")
	deleteUser(_id: ID!): Boolean @hasPermission(permission: "USER_DELETE")
	deleteUsers: Boolean! @isAuthenticated
	login(input: LoginUserInput!): LoginResponse
	lockAndUnlockUser(_id: ID!, reason: String!): Boolean
		@hasPermission(permission: "USER_LOCK_AND_UNLOCK")
	changePassword(_id: ID!, currentpassword: String!, password: String!): Boolean
		@isAuthenticated
	forgotPassword(email: String!): Boolean
	resetPassword(resetPasswordToken: String!, password: String!): Boolean
}

type Subscription {
	userCreated: User @isAuthenticated
}
