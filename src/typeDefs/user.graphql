enum Gender {
	MALE
	FEMALE
}

enum RecordType {
	User
	File
}

type Users {
	users: [User!]
}

union Result = User | File
union UserResult = User | Users

input UserInput {
	firstName: String
	lastName: String
	email: String
	password: String
	gender: Gender
}

input FileInput {
	filename: String
}

input RecordInput {
	User: UserInput
	File: FileInput
}

input CreateUserInput {
	firstName: String!
	lastName: String!
	email: String!
	password: String!
	gender: Gender!
}

input UpdateUserInput {
	firstName: String!
	lastName: String!
	password: String!
	gender: Gender!
}

input LoginUserInput {
	email: String!
	password: String! @length(max: 2)
}

input SearchInput {
	select: [String!]
	where: RecordInput
	start: Float
	end: Float
	order: JSONObject
	skip: Int
	take: Int
}

type LoginResponse {
	accessToken: String!
	refreshToken: String!
}

type RefreshTokenResponse {
	accessToken: String!
}

type User {
	_id: ID!
	firstName: String!
	lastName: String!
	email: String!
	password: String!
	gender: Gender!
	resetPasswordToken: String
	resetPasswordExpires: Float
	fullName: String @upper @concat(value: "Chnirt")
	isVerified: Boolean!
	isActivated: Boolean @deprecated(reason: "Use `isVerified`.")
	isLocked: Boolean!
	reason: String!
	isActive: Boolean!
	createdAt: Float!
	updatedAt: Float!
}

type Query {
	hello: String! @length(max: 2)
	me: User @isAuthenticated
	users(offset: Int, limit: Int): [User!] @isAuthenticated
	user(_id: ID!): User @isAuthenticated
	search(conditions: SearchInput!): [Result]! @isAuthenticated
	searchUser(userIds: [String!]): UserResult!
		@rateLimit(window: "3s", max: 1, message: "You are doing that too often.")
	# today: Date @date @hasScope(scope: [“read:rating”])
	today: Date @date
}

type Mutation {
	createUser(input: CreateUserInput!): User
		@rateLimit(window: "5s", max: 1, message: "You are doing that too often.")
	updateUser(_id: ID!, input: UpdateUserInput!): Boolean @isAuthenticated
	deleteUser(_id: ID!): Boolean @isAuthenticated
	deleteUsers: Boolean! @isAuthenticated
	verifyUser(emailToken: String!): Boolean
	login(input: LoginUserInput!): LoginResponse
	refreshToken(refreshToken: String!): RefreshTokenResponse
	lockAndUnlockUser(_id: ID!, reason: String!): Boolean @isAuthenticated
	changePassword(
		_id: ID!
		currentPassword: String!
		password: String!
	): Boolean @isAuthenticated
	forgotPassword(email: String!): Boolean
	resetPassword(resetPasswordToken: String!, password: String!): Boolean
}

type Subscription {
	userCreated: User @isAuthenticated
}
