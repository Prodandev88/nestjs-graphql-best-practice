directive @isAuthenticated on FIELD | FIELD_DEFINITION
directive @hasPermission(permission: String) on FIELD | FIELD_DEFINITION

input SitesInfoInput {
	siteId: ID!
	permissions: [PermissionInfoInput!]!
}

input CreateUserInput {
	username: String!
	password: String!
	fullName: String!
	sites: [SitesInfoInput!]!
}

input UpdateUserInput {
	password: String!
	fullName: String!
	sites: [SitesInfoInput!]!
}

input LoginUserInput {
	username: String!
	password: String!
}

type LoginResponse {
	token: String!
	userPermissions: [UserPermissionsInfo!]!
}

type UserPermissionsInfo {
	siteId: ID!
	siteName: String
	permissions: [PermissionInfo!]!
	sitepermissions: [String!]!
}

type PermissionInfo {
	_id: ID
	code: String
}

type User {
	_id: ID!
	username: String!
	password: String!
	fullName: String!
	isLocked: Boolean!
	reason: String!
	isActive: Boolean!
	createdAt: String!
	updatedAt: String!
}

type Query {
	hello: String!
	me: User @isAuthenticated
	users(offset: Int, limit: Int): [User!] @isAuthenticated
	user(_id: ID!): User @isAuthenticated
}

type Mutation {
	createUser(input: CreateUserInput!): User
		@hasPermission(permission: "USER_CREATE")
	updateUser(_id: ID!, input: UpdateUserInput!): Boolean
		@hasPermission(permission: "USER_UPDATE")
	deleteUser(_id: ID!): Boolean @hasPermission(permission: "USER_DELETE")
	deleteUsers: Boolean! @isAuthenticated
	login(input: LoginUserInput!): LoginResponse
	lockAndUnlockUser(_id: ID!, reason: String!): Boolean
		@hasPermission(permission: "USER_LOCK_AND_UNLOCK")
	forgotPassword(email: String!): Boolean
}

type Subscription {
	userCreated: User @isAuthenticated
}
